const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

const GEMINI_API_KEY = 'YOUR_GEMINI_API_KEY';
const imagePath = './food.jpg'; // replace with your image

// STEP 1: Convert image to base64
const imageBuffer = fs.readFileSync(imagePath);
const imageBase64 = imageBuffer.toString('base64');

// STEP 2: Send to Gemini
async function getFoodDescriptionFromGemini(imageBase64) {
  const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key=' + GEMINI_API_KEY, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      contents: [
        {
          parts: [
            {
              inlineData: {
                mimeType: 'image/jpeg',
                data: imageBase64,
              },
            },
            {
              text: 'Identify the food items in this image and estimate calorie content per item.',
            },
          ],
        },
      ],
    }),
  });

  const data = await response.json();
  const geminiOutput = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
  console.log('Gemini Response:\n', geminiOutput);
  return geminiOutput;
}

// STEP 3: Use Open Food Facts to get real calorie values
async function getCaloriesFromOpenFoodFacts(foodItem) {
  const response = await fetch(`https://world.openfoodfacts.org/cgi/search.pl?search_terms=${encodeURIComponent(foodItem)}&search_simple=1&action=process&json=1`);
  const data = await response.json();
  const product = data.products?.[0];
  if (product?.nutriments?.['energy-kcal_100g']) {
    return `${foodItem}: ${product.nutriments['energy-kcal_100g']} kcal/100g`;
  }
  return `${foodItem}: Calorie info not found.`;
}

// STEP 4: Main Logic
(async () => {
  const description = await getFoodDescriptionFromGemini(imageBase64);

  // crude extraction â€” ideally use NLP to parse Gemini's text
  const foodItems = description.match(/\b[a-zA-Z]+\b/g).filter((word, i, arr) => word.length > 3 && arr.indexOf(word) === i).slice(0, 5);

  console.log('\nChecking calories from Open Food Facts...\n');
  for (const item of foodItems) {
    const calorieInfo = await getCaloriesFromOpenFoodFacts(item);
    console.log(calorieInfo);
  }
})();
